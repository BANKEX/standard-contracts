const assert = require('assert');
const path = require('path');
const util = require('./utils');
const async = require('async');
const BigNumber = require("bignumber.js");
const testdata = require('./data/secp2561k_data.json');

var secp256k1;

const bytecode = "";
const ABI = [{
    "constant": true,
    "inputs": [{"name": "h", "type": "bytes32"}, {"name": "rs", "type": "uint256[2]"}, {
        "name": "Q",
        "type": "uint256[2]"
    }],
    "name": "validateSignature",
    "outputs": [{"name": "", "type": "bool"}],
    "type": "function"
}, {
    "constant": true,
    "inputs": [{"name": "P", "type": "uint256[2]"}],
    "name": "compress",
    "outputs": [{"name": "yBit", "type": "uint8"}, {"name": "x", "type": "uint256"}],
    "type": "function"
}, {
    "constant": true,
    "inputs": [{"name": "P", "type": "uint256[2]"}],
    "name": "isPubKey",
    "outputs": [{"name": "", "type": "bool"}],
    "type": "function"
}, {
    "constant": true,
    "inputs": [{"name": "P", "type": "uint256[2]"}],
    "name": "onCurve",
    "outputs": [{"name": "", "type": "bool"}],
    "type": "function"
}, {
    "constant": true,
    "inputs": [{"name": "yBit", "type": "uint8"}, {"name": "Px", "type": "uint256"}],
    "name": "decompress",
    "outputs": [{"name": "", "type": "uint256[2]"}],
    "type": "function"
}];

describe('Crypto', function () {

    before(function (done) {
        this.timeout(300000); // 5 minutes.
        util.initWeb3(function (err) {
            if (err)
                return done(err);
            util.deploy(ABI, bytecode, function (err, contract) {
                if (err)
                    return done(err);
                secp256k1 = contract;
                done();
            });
        });
    });

    describe('Secp256k1Curve', function () {

        describe('#onCurve()', function () {

            it('should detect that the given points are on the curve', function (done) {
                this.timeout(10000);
                async.forEachOfSeries(testdata.randomPoints, function (point, idx, cb) {
                        secp256k1.onCurve(point, function (err, result) {
                            assert.ifError(err);
                            assert(result);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

            it('should detect that the given points are not on the curve', function (done) {
                this.timeout(10000);
                async.forEachOfSeries(testdata.randomPoints, function (point, idx, cb) {
                        secp256k1.onCurve([point[0] + 1, point[1]], function (err, result) {
                            assert.ifError(err);
                            assert(!result);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });
        });

        describe('#isPubKey()', function () {

            it('should detect that the given points are valid public keys', function (done) {
                this.timeout(10000);
                async.forEachOfSeries(testdata.randomPoints, function (point, idx, cb) {
                        secp256k1.isPubKey(point, function (err, result) {
                            assert.ifError(err);
                            assert(result);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

            it('should detect that the given points are not valid public keys', function (done) {
                this.timeout(10000);
                async.forEachOfSeries(testdata.randomPoints, function (point, idx, cb) {
                        secp256k1.isPubKey([point[0] + 1, point[1]], function (err, result) {
                            assert.ifError(err);
                            assert(!result);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });
        });

        describe('#validateSignature()', function () {

            it('should detect that the given signatures are valid', function (done) {
                this.timeout(10000);
                var message = testdata.message;
                async.forEachOfSeries(testdata.keypairs, function (keypair, idx, cb) {
                        var signature = testdata.signatures[idx];
                        secp256k1.validateSignature(message, signature, keypair.pub, function (err, result) {
                            assert.ifError(err);
                            assert(result);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

            it('should detect that the public key does not correspond to the given signature', function (done) {
                this.timeout(10000);
                var message = testdata.message;
                async.forEachOfSeries(testdata.keypairs, function (keypair, idx, cb) {
                        var signature = testdata.signatures[17 - idx];
                        secp256k1.validateSignature(message, signature, keypair.pub, function (err, result) {
                            assert.ifError(err);
                            assert(!result);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

            it('should detect that the given signatures and pubkeys are wrong for the given message', function (done) {
                this.timeout(10000);
                var message = "0x1234123412341234123412341234123412341234123412341234123412341234";
                async.forEachOfSeries(testdata.keypairs, function (keypair, idx, cb) {
                        var signature = testdata.signatures[idx];
                        secp256k1.validateSignature(message, signature, keypair.pub, function (err, result) {
                            assert.ifError(err);
                            assert(!result);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

            it('should compress a set of points successfully', function (done) {
                this.timeout(10000);
                async.forEachOfSeries(testdata.keypairs, function (keypair, idx, cb) {
                        secp256k1.compress(keypair.pub, function (err, result) {
                            assert.ifError(err);
                            var x = new BigNumber(keypair.pub[0]);
                            var yBit = new BigNumber(keypair.pub[1]).mod(2);
                            assert(yBit.eq(result[0]));
                            assert(x.eq(result[1]));
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

            it('should decompress a set of points successfully', function (done) {
                this.timeout(10000);
                async.forEachOfSeries(testdata.keypairs, function (keypair, idx, cb) {
                        var x = new BigNumber(keypair.pub[0]);
                        var yBit = new BigNumber(keypair.pub[1]).mod(2);
                        secp256k1.decompress(yBit, x, function (err, result) {
                            assert.ifError(err);
                            assert(new BigNumber(keypair.pub[0]).eq(result[0]));
                            assert(new BigNumber(keypair.pub[1]).eq(result[1]));
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

        });

    });

});