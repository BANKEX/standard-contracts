const assert = require('assert');
const path = require('path');
const util = require('./utils');
const async = require('async');

var rlpreadertest;

const bytecode = "6060604052610e27806100126000396000f3606060405236156100985760e060020a600035046304455e95811461009a5780630902c6d7146100f2578063564ad1421461014a5780637b053195146101ec5780637b8167191461024457806395e77a051461029c578063a49886ce14610386578063b66e68f2146103de578063c91813ca1461044d578063d572056e146104a5578063e95bd5f214610520578063f8f1f15114610585575b005b6105dd6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050600061070a6107128361034a565b6105dd6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050600061074b6107528361034a565b6105ef6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437505060408051602081810183526000808352835160a08101855260608101828152608082018390528152808301829052845180860190955281855291840181905297995097359787965086955090935084925090829061077f6107b48b61034a565b6105dd6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050600061074b6107248361034a565b6105dd6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050600061074b6107578361034a565b6105ef6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050604080516020818101835260008083528351808501909452808452908301819052918291829182906108d2876001604080518082018252600080825260208281018290528351808501909452818452830181905290918190841515610b5057610b44865b604080518082019091526000808252602082018190528251908181141561095a5760408051808201909152818152602081018290529250610977565b6105dd6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050600061074b6108f08361034a565b6106556004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050604080518082019091526000808252602082018190529081908190816108fb8661034a565b6105dd6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050600061074b6109208361034a565b6105ef6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050604080516020818101835260008083528351808501909452808452908301819052918291829182906108d28761034a565b6106736004808035906020019082018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965050505050505060408051602081019091526000815261070a6109318361034a565b6106e16004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050600061074b61094b8361034a565b60408051918252519081900360200190f35b60405180868152602001858152602001848152602001806020018381526020018281038252848181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f150905001965050505050505060405180910390f35b60408051938452602084019290925282820152519081900360600190f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156106d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b90505b919050565b610735565b96508615610a945761078b8a5b600060006000600060006000610af4875b6000600082602001516000141561097e57610991565b905061070d565b61075e565b600061074b825b600060006000610997845b60006000826020015160001415610cb957610991565b92505b6108368361080a565b945084508460405180591061079d5750595b818152602091820281019091016040529550610a888a5b6040805160a08101909152600060608201818152608083018290528252602082018190526109eb83602081015160001461070d565b61085c835b6040805180820190915260008082526020820181905280610a36845b604080518082019091526000808252602091820152815180820151815192840151920190911090610991565b801561084157508882105b156107e95761084f836107ee565b5060019190910190610782565b90506108bc815b60408051602081810183526000808352835160a08101855260608101828152608082018390528152808301829052845180860190955281855284830182905285519286015192949293919283918291826107178a610735565b939e929d50909b50995090975095505050505050565b90506108dd81610863565b939b929a50909850965090945092505050565b600061074b8261075e565b8051602091909101518151919890975060009190911a60f860020a0295509350505050565b6000600060006000610bba85610769565b6040805160208101909152600080825280610c0f84610769565b600060006000610c7b84610769565b506040805180820190915260208481018083529082018390529092505b5050919050565b8260000151905060c0815160001a101591505b50919050565b15156109a257610002565b6109ba845b60006000600060006000610cc986610769565b9150915060208111806109cd5750806000145b156109d757610002565b806020036101000a82510492505050919050565b806109fc57506109fa83610735565b155b15610a0657610002565b610a23835b600060006000836020015160001415610d3a57610977565b8351938352929092016020820152919050565b15610a4b5783602001519150610a5082610a6f565b610002565b8284526020848101829052818401908601529050610977565b82610ba7835b8051600090811a6080811015610da05760019150610991565b92505b610aa18361080a565b5050505091939590929450565b8015610aac57508484105b15610a9457610aba836107ee565b915081519050808685815181101561000257505050602084810287010181905260019390930192610a8b565b8095505b5050505050919050565b1515610b035760009550610aea565b8651805160001a95509350610b1787610a0b565b840192506001876020015185010391505b818311610ae657610b3883610a6f565b90920191600101610b28565b93505b50505092915050565b855192508260001415610b785760408051808201909152600080825260208201529350610b47565b50506040805180820190915260208581018083529082018390529082610b9d82610a0b565b10610a6957610002565b1115610bb257610002565b809350610b47565b1515610bc557610002565b610bce856109a7565b909350915060018214610be057610002565b50815160001a6001811115610bf457610002565b80600114610c03576000610c06565b60015b95945050505050565b1515610c1a57610002565b610c23846109a7565b9150915080604051805910610c355750595b81815260209182028101909101604052925061097782848360006020601f83010484602085015b828414610e145760208402808301518183015260018501945050610c5c565b1515610c8657610002565b610c8f846109a7565b909250905060148114610ca157610002565b50516c01000000000000000000000000900492915050565b5050515160c060009190911a1090565b1515610cd457610002565b8551805160001a935091506080831015610cf657909350600192508390610d32565b60b8831015610d15576020860151600183019550600019019350610d32565b50602085015181830160b51901945082900360b601925060b61982015b505050915091565b50508151805160001a906080821015610d565760009250610977565b60b8821080610d71575060c08210158015610d71575060f882105b15610d7f5760019250610977565b60c0821015610d945760b51982019250610977565b60f51982019250610977565b60b8811015610db557607e1981019150610991565b60c0811015610dde57600183015160b76020839003016101000a9004810160b519019150610991565b60f8811015610df35760be1981019150610991565b6001929092015160f76020849003016101000a900490910160f51901919050565b600086516020018701525050505050505056";
const ABI = [{"constant":true,"inputs":[{"name":"rlp","type":"bytes"}],"name":"testIsList","outputs":[{"name":"ret","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"rlp","type":"bytes"}],"name":"testToUint","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"rlp","type":"bytes"},{"name":"index","type":"uint256"}],"name":"testSubItem","outputs":[{"name":"memPtr","type":"uint256"},{"name":"len","type":"uint256"},{"name":"isList","type":"bool"},{"name":"list","type":"uint256[]"},{"name":"listLen","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"rlp","type":"bytes"}],"name":"testItems","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"rlp","type":"bytes"}],"name":"testToInt","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[{"name":"rlp","type":"bytes"}],"name":"testItemStrict","outputs":[{"name":"memPtr","type":"uint256"},{"name":"len","type":"uint256"},{"name":"isList","type":"bool"},{"name":"list","type":"uint256[]"},{"name":"listLen","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"rlp","type":"bytes"}],"name":"testToBytes32","outputs":[{"name":"","type":"bytes32"}],"type":"function"},{"constant":true,"inputs":[{"name":"rlp","type":"bytes"}],"name":"testFirst","outputs":[{"name":"memPtr","type":"uint256"},{"name":"len","type":"uint256"},{"name":"first","type":"bytes1"}],"type":"function"},{"constant":true,"inputs":[{"name":"rlp","type":"bytes"}],"name":"testToBool","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"rlp","type":"bytes"}],"name":"testItem","outputs":[{"name":"memPtr","type":"uint256"},{"name":"len","type":"uint256"},{"name":"isList","type":"bool"},{"name":"list","type":"uint256[]"},{"name":"listLen","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"rlp","type":"bytes"}],"name":"testToData","outputs":[{"name":"bts","type":"bytes"}],"type":"function"},{"constant":true,"inputs":[{"name":"rlp","type":"bytes"}],"name":"testToAddress","outputs":[{"name":"","type":"address"}],"type":"function"}];

describe('Codec', function () {

    describe('RLPReader', function () {

        before(function (done) {
            this.timeout(300000); // 5 minutes.
            util.initWeb3(function (err) {
                if (err)
                    return done(err);
                util.deploy(ABI, bytecode, function (err, contract) {
                    if (err)
                        return done(err);
                    rlpreadertest = contract;
                    done();
                });
            });
        });

        describe('#toRLPItem(bytes)', function () {

            it('should create an RLP item from encoded strings', function (done) {
                async.forEachOfSeries(testStrings, function (testData, idx, cb) {
                        rlpreadertest.testItem(testData.input, function (err, result) {
                            assert.ifError(err);
                            var eRes = testData.result;
                            var len = result[1].toNumber();
                            assert.equal(len, eRes.length);
                            var isList = result[2];
                            assert(!isList);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

            it('should create an RLP item from encoded lists', function (done) {
                async.forEachOfSeries(testLists, function (testData, idx, cb) {
                        rlpreadertest.testItem(testData.input, function (err, result) {
                            assert.ifError(err);
                            var eRes = testData.result;
                            var memPtr = result[0].toNumber();
                            var len = result[1].toNumber();
                            assert.equal(len, eRes.length);
                            var isList = result[2];
                            assert(isList);
                            var list = result[3];
                            var listLen = result[4].toNumber();
                            if(listLen > 0) {
                                for(var i = 0; i < listLen; i++) {
                                    var le = list[i].toNumber();
                                    assert.equal(le - memPtr, eRes.list[i]);
                                }
                            }
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

        });

        describe('#isList(Slice)', function () {

            it('should detect that RLP encoded strings are not lists', function (done) {
                async.forEachOfSeries(testStrings, function (testData, idx, cb) {
                        rlpreadertest.testIsList(testData.input, function (err, result) {
                            assert.ifError(err);
                            assert(!result);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

            it('should detect that RLP encoded lists are lists', function (done) {
                async.forEachOfSeries(testLists, function (testData, idx, cb) {
                        rlpreadertest.testIsList(testData.input, function (err, result) {
                            assert.ifError(err);
                            assert(result);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

        });

        describe('#items(Slice)', function () {

            it('should find the correct number of elements in an RLP encoded list', function (done) {
                async.forEachOfSeries(testLists, function (testData, idx, cb) {
                        rlpreadertest.testItems(testData.input, function (err, result) {
                            assert.ifError(err);
                            var listLen = result.toNumber();
                            assert.equal(listLen, testData.result.list.length);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

        });

        describe('#item(Slice, uint)', function () {
            /*
            // List of strings and lists mixed
            input: "0xC8C201028101C20102",
                result: {length: 9, list: [1, 4, 6]}
            */
            it('should create an RLP item from index 0 of "0xC9C201028101C3010203"', function (done) {
                rlpreadertest.testItem("0xC9C201028101C3010203", function(err, result){
                    assert.ifError(err);
                    var subPtr = result[3][0].toNumber();
                    rlpreadertest.testSubItem("0xC9C201028101C3010203", 0, function (err, result) {
                        assert.ifError(err);
                        var memPtr = result[0].toNumber();
                        assert.equal(memPtr, subPtr);
                        var len = result[1].toNumber();
                        assert.equal(len, 3);
                        var isList = result[2];
                        assert(isList);
                        var list = result[3];
                        var listLen = result[4].toNumber();
                        assert.equal(listLen, 2);
                        assert.equal(list[0].toNumber(), memPtr + 1);
                        assert.equal(list[1].toNumber(), memPtr + 2);
                        done();
                    });

                });

            });

            it('should create an RLP item from index 1 of "0xC9C201028101C3010203"', function (done) {
                rlpreadertest.testItem("0xC9C201028101C3010203", function(err, result){
                    assert.ifError(err);
                    var subPtr = result[3][1].toNumber();
                    rlpreadertest.testSubItem("0xC9C201028101C3010203", 1, function (err, result) {
                        assert.ifError(err);
                        var memPtr = result[0].toNumber();
                        assert.equal(memPtr, subPtr);
                        var len = result[1].toNumber();
                        assert.equal(len, 2);
                        var isList = result[2];
                        assert(!isList);
                        done();
                    });

                });

            });

            it('should create an RLP item from index 2 of "0xC9C201028101C3010203"', function (done) {
                rlpreadertest.testItem("0xC9C201028101C3010203", function(err, result){
                    assert.ifError(err);
                    var subPtr = result[3][2].toNumber();
                    rlpreadertest.testSubItem("0xC9C201028101C3010203", 2, function (err, result) {
                        assert.ifError(err);
                        var memPtr = result[0].toNumber();
                        assert.equal(memPtr, subPtr);
                        var len = result[1].toNumber();
                        assert.equal(len, 4);
                        var isList = result[2];
                        assert(isList);
                        var list = result[3];
                        var listLen = result[4].toNumber();
                        assert.equal(listLen, 3);
                        assert.equal(list[0].toNumber(), memPtr + 1);
                        assert.equal(list[1].toNumber(), memPtr + 2);
                        assert.equal(list[2].toNumber(), memPtr + 3);
                        done();
                    });

                });

            });

        });
        
        describe('#toData(Slice)', function () {

            it('should decode RLP encoded data and return it as bytes', function (done) {
                async.forEachOfSeries(testStrings, function (testData, idx, cb) {
                        rlpreadertest.testToData(testData.input, function (err, result) {
                            assert.ifError(err);
                            assert.equal(result, testData.result.bytes);
                            cb();
                        })
                    }, function () {
                        done();
                    }
                );
            });

        });

    });

});

const testStrings = [
    {
        input:  "0x00",
        result: {bytes: "0x00", length: 1}
    }, {
        input:  "0x05",
        result: {bytes: "0x05", length: 1}
    }, {
        input:  "0x80",
        result: {bytes: "0x", length: 1}
    }, {
        input:  "0x820505",
        result: {bytes: "0x0505", length: 3}
    }, {
        input:  "0x880102030405060708",
        result: {bytes: "0x0102030405060708", length: 9}
    }, {
        input:  "0xB701020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607",
        result: {bytes: "0x01020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607", length: 56}
    }, {
        input:  "0xB8380102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708",
        result: {bytes: "0x0102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708", length: 58}
    }, {
        input:  "0x
        result: {bytes: "0x01020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708", length: 259}
    }
];

// List is offset by starting memory address in tests.
const testLists = [
    {
        // Empty list
        input: "0xC0",
        result: {length: 1, list: []}
    }, {
        // List of length 1 items
        input: "0xC80102030405060708",
        result: {length: 9, list: [1, 2, 3, 4, 5, 6, 7, 8]}
    }, {
        // List of mixed string types
        input: "0xF873B70102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060705B8380102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708",
        result: {length: 117, list: [2, 58, 59]}
    }, {
        // List of empty lists
        input: "0xC3C0C0C0",
        result: {length: 4, list: [1, 2, 3]}
    }, {
        // List of lists
        input: "0xC6C20102C20102",
        result: {length: 7, list: [1, 4]}
    }, {
        // List of strings and lists mixed
        input: "0xC8C201028101C20102",
        result: {length: 9, list: [1, 4, 6]}
    }, {
        // List of length 55
        input: "0xF7B6010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506",
        result: {length: 56, list: [1]}
    }, {
        // List of length > 55
        input: "0xF838B701020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607",
        result: {length: 58, list: [2]}
    }, {
        // List of length with length > 255
        input: "0xF90103B9010001020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708",
        result: {length: 262, list: [3]}
    }, {
        // A long list of strings and lists mixed.
        input: "0x
        result: {length: 1175, list: [3, 59, 321, 322, 331, 389, 651, 913]}}
];